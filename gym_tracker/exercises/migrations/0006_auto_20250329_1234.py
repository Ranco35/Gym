# Generated by Django 5.0.2 on 2025-03-29 15:34

from django.db import migrations, models
import django.db.models.deletion
import gym_tracker.exercises.models


def create_categories(apps, schema_editor):
    """
    Crear categorías a partir de las categorías existentes en los ejercicios.
    """
    Exercise = apps.get_model('exercises', 'Exercise')
    ExerciseCategory = apps.get_model('exercises', 'ExerciseCategory')
    
    # Obtener todas las categorías únicas de los ejercicios existentes
    existing_categories = set(Exercise.objects.values_list('category', flat=True).distinct())
    
    # Crear las categorías en la base de datos
    for category_name in existing_categories:
        if category_name:  # Evitar categorías vacías o nulas
            ExerciseCategory.objects.get_or_create(name=category_name)
    
    # Asegurarse de que existe la categoría por defecto 'Otros'
    ExerciseCategory.objects.get_or_create(name='Otros')


def update_exercise_categories(apps, schema_editor):
    """
    Actualizar los ejercicios para que apunten a las nuevas categorías.
    """
    Exercise = apps.get_model('exercises', 'Exercise')
    ExerciseCategory = apps.get_model('exercises', 'ExerciseCategory')
    
    # Crear un diccionario para mapear nombres de categoría a objetos de categoría
    categories = ExerciseCategory.objects.all()
    category_mapping = {category.name: category for category in categories}
    
    # Obtener la categoría por defecto
    default_category = ExerciseCategory.objects.get(name='Otros')
    
    # Actualizar los ejercicios
    for exercise in Exercise.objects.all():
        category_name = exercise.category_temp
        category_obj = category_mapping.get(category_name, default_category)
        exercise.category = category_obj
        exercise.save(update_fields=['category'])


class Migration(migrations.Migration):

    dependencies = [
        ('exercises', '0005_exercisecategory_alter_exercise_category'),
    ]

    operations = [
        # 1. Revertir el cambio de tipo de campo en Exercise.category
        migrations.AlterField(
            model_name='exercise',
            name='category',
            field=models.CharField(max_length=50),
        ),
        
        # 2. Renombrar el campo category a category_temp
        migrations.RenameField(
            model_name='exercise',
            old_name='category',
            new_name='category_temp',
        ),
        
        # 3. Crear un nuevo campo category como ForeignKey
        migrations.AddField(
            model_name='exercise',
            name='category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='exercises', to='exercises.exercisecategory'),
        ),
        
        # 4. Ejecutar función para actualizar las categorías
        migrations.RunPython(update_exercise_categories),
        
        # 5. Eliminar el campo temporal
        migrations.RemoveField(
            model_name='exercise',
            name='category_temp',
        ),
        
        # 6. Configurar el campo category como no nulo con valor por defecto
        migrations.AlterField(
            model_name='exercise',
            name='category',
            field=models.ForeignKey(default=gym_tracker.exercises.models.ExerciseCategory.get_default_pk, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='exercises', to='exercises.exercisecategory'),
        ),
    ]
